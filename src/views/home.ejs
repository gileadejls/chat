<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./css/style.css">
    <title>Document</title>
</head>
<body>
    <div class="container-info">
        <form  action="/request" method="post" id="sendForm">
            <input type="text" placeholder="adicionar usuario" name="user" id="finduser">
            <button type="submit">Enviar solicitação</button>
        </form>
        <% if(requests) { %>
         <div class="all-requests">
            <% for(const req of requests) { %>
                <div>
                    <div class="user-request">
                        <p><%= req.user %></p>
                    </div>
                    <div class="response">
                        <button  id="accept">Y</button>
                        <button  id="reject">X</button>
                    </div>
                </div>
            <% } %>
         </div>   
        <% } %>
    </div>
    <div class="container">
        <ul id="messages">
        </ul>
        <form id="messageForm">
            <input type="text"  id="m" autocomplete="off" placeholder="digite aqui">
            <button type="submit" id="">Enviar</button>
        </form>
    </div>

    <script src="https://cdn.socket.io/4.1.2/socket.io.min.js"></script>
    <script>
        const form = document.querySelector("#sendForm") 

        //SOCKETS

        const socket = io()
        const mywords = []



        

            //FUNÇÕES PARA OS EFEITOS DE SONS AO ENVIAR MENSAGENS
            async function sendAudio(){
                let sendaudiotext = await new Audio('./audios/sentcut.mp3')

                sendaudiotext.play()
            }

            async function recivedAudio(){
                let recivedaudiotext = await new Audio('./audios/recivedcut.mp3')

                recivedaudiotext.play()
            }

            function sendRequestFriend(){
                document.querySelector('#sendForm').addEventListener('submit', async (event)=>{
                    event.preventDefault()

                    const data = {whoadd: document.querySelector('#finduser').value}

                    const sendtherequest = await fetch('/request', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    })

                    if(sendtherequest.ok){
                        console.log('tudo certo')
                    }else{
                        console.log('Não foi enviado')
                        window.location.replace('/login')
                    }
                })
            }

            function responseRequestFriend(){
                const buttons = document.querySelectorAll('.response button')
                buttons.forEach((btn)=>{
                    btn.addEventListener('click', async ()=>{

                        let whosend =  btn.parentNode.parentNode.childNodes[1].childNodes[1].textContent
                        const data = {whosend: whosend, myresponse: btn.id}

                        const responseRequest = await fetch('/response', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(data)
                        })

                        if(responseRequest.ok){
                            console.log('Solicitação respondida')
                        }else{
                            console.log('Não foi possivel responder a solicitalão')
                        }
                    })
                })
            }

            function sendMessage(){
                //PEGA O VALOR QUE ESTÁ NO INPUT E IMPEDE O ENVIO DO FORMULARIO PARA TRATAMENTO ANTES
                document.querySelector('#messageForm').addEventListener('submit', function(event) {
                    event.preventDefault()
                    txt = document.querySelector("#m").value


                    //VERIFICA SE TEM SOMENTE ESPAÇOS VAZIOS, CASO TENHA, ELE NÃO ENVIA
                    if(txt.match(/[^\s]/gi) !== null){
                        socket.emit('chat message', {msg: document.querySelector('#m').value, id: socket.id})
                    }

                    // DEIXA O INPUT VAZIO DEPOIS DE ENVIAR
                    document.querySelector('#m').value = ''
                })
            }
            

            responseRequestFriend()
            sendRequestFriend()
            sendMessage()


            socket.on('messages', (msg)=>{
                console.log(msg)
            })
    </script>
</body>
</html>